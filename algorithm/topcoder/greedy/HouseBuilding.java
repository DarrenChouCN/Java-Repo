package topcoder.greedy;

/*
HouseBuilding

  Manao is building a new house. He already purchased a rectangular area where he will place the house. The basement of the house should be built on a level ground, so Manao will have to level the entire area. The area is leveled if the difference between the heights of its lowest and highest square meter is at most 1. Manao wants to measure the effort he needs to put into ground leveling.

  You are given a String[] area. Each character in area denotes the height at the corresponding square meter of Manao's area. Using 1 unit of effort, Manao can change the height of any square meter on his area by 1 up or down. Return the minimum total effort he needs to put to obtain a leveled area.
 */
public class HouseBuilding {
  public int getMinimum(String[] area) {
    int rows = area.length;
    int cols = area[0].length();
    int minEffort = Integer.MAX_VALUE;

    int[][] height = new int[rows][cols];
    int minHeight = 9, maxHeight = 0;
    for (int i = 0; i < rows; i++) {
      for (int j = 0; j < cols; j++) {
        height[i][j] = area[i].charAt(j) - '0';
        minHeight = Math.min(minHeight, height[i][j]);
        maxHeight = Math.max(maxHeight, height[i][j]);
      }
    }

    for (int h = minHeight; h <= maxHeight; h++) {
      int effort = 0;
      for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
          int current = height[i][j];
          if (current < h) {
            effort += h - current;
          } else if (current > h + 1) {
            effort += current - (h + 1);
          }
        }
      }
      minEffort = Math.min(minEffort, effort);
    }

    return minEffort;
  }

  public static void main(String[] args) {
    HouseBuilding building = new HouseBuilding();
    String[] area1 = { "11111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111", "11111111111111111111111111111111111111111111111111",
        "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
        "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
        "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
        "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
        "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
        "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
        "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
        "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
        "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
        "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
        "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
        "99999999999999999999999999999999999999999999999999", "99999999999999999999999999999999999999999999999999",
        "99999999999999999999999999999999999999999999999999" };
    System.out.println(building.getMinimum(area1));
  }
}
